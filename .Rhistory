r[1] + x_scaled * (r[2] - r[1])
}
plot(expectativa ~pibpercap, data=df_1982, log = 'x',
col = mycol[continente],
cex = mycex(pop, r = c(0.2, 10)))
set.seed(67)
x = rnorm(10,5,7)
y = rpois(10,7)
z = rnorm(10,6,7)
t = rpois(10,9)
plot(x, y, col = 123, pch = 10, main = "Multi Scatterplots",
col.main = 'red', cex.main = 1.5, xlab='indep',
ylab = 'depen')
points(z, t, col = 'blue', pch = 4)
#add outros dados
points(y, t, col = 777, pch = 9)
#cria legenda
legend(-6,5.9, legend = c('Nivel 1', 'Nivel 2', 'Nivel 3'),
col = c(123, 'blue', 777), pch = c(10,4,9),
cex = 0.65, bty = 'n')
?boxplot
?sleep
#permite utilizar as colunas sem especificar o nome do dataset
attach(sleep)
sleepboxplot = boxplot(data = sleep, extra ~ group,
main = 'Duração do Sono',
col.main = 'red', ylab = 'Horas', xlab = 'Drogas')
means = by(extra, group, mean)
#Adiciona a media ao grafico
points(means, col ='red')
#Boxplot horizontal
horizontalboxplot = boxplot(data = sleep, extra ~group,
ylab = '', xlab = '', horizontal = T)
horizontalboxplot = boxplot(data = sleep, extra ~group,
ylab = '', xlab = '', horizontal = T,
col = c('blue', 'red'))
?hist
?cars
#Definindo os dados
dados = cars$speed
#Construindo um histograma
hist(dados)
hist(dados, breaks = 10)
hist(dados, labels = T, breaks =c(0,5,10,20,30))
hist(dados, labels = T, breaks =10)
hist(dados, labels = T, ylim=c(0,10), breaks =c(0,5,10,20,30))
hist(dados, labels = T, ylim=c(0,10), breaks = 10)
#add linhas ao histograma
hey = hist(dados, breaks = 10)
xaxis =seq(min(dados), max(dados), lenght = 10)
xaxis =seq(min(dados), max(dados), length= 10)
xaxis =seq(min(dados), max(dados), length= 10) #sequencia de valores
yaxis = dnorm(xaxis, mean = mean(dados), sd = sd(dados))
yaxis = yaxis*diff(hey$mids)*length(dados)
lines(xaxis, yaxis, col = 'red')
?pie
fatais = c(40,20,40)
#nomeandos os labes
paises=c('Brasil', 'Chile', 'Argentina')
#Unindo paises e fatias
paises = paste(paises, fatias)
#sem separador
paises = paste(paises, '%', sep ='')
colors()
#Construindo um grafico
pie(fatias, labels = paises,
col = c('azure', 'darksalmon', 'wheat4'), main = 'Distruibuição')
fatias = c(40,20,40)
#Unindo paises e fatias
paises = paste(paises, fatias)
#sem separador
paises = paste(paises, '%', sep ='')
#Construindo um grafico
pie(fatias, labels = paises,
col = c('azure', 'darksalmon', 'wheat4'), main = 'Distruibuição')
#Trabalhando com dataframes
?iris
attach(iris)
Values = table(Species)
labels = paste(names(Values))
pie(Values, labels, main = 'Especie')
#3D grafico
library(plotrix)
pie3D(fatias, labels = paises, explode = 0.05,
col=c('steelblue1','tomato2','tan3'),
main = 'Distrubição de vendas')
#Barplot
?barplot
casamentos <- matrix(c(652,1537,598,242,36,46,38,21,218,357,106,67),
nr=3, byrow = T)
colnames(casamentos)<-c('0','1-150','151-300','>300')
rownames(casamentos)<-c('Casado','Solteiro', 'Divorciado')
#Construindo um plot
barplot(casamentos)
barplot(casamentos, beside=T)
#Transposta da matriz
barplot(t(casamentos), beside = T)
install.packages('ggplot2')
library(ggplot2)
#plotando o um grafico basico com qplot()
data(tips, package = 'reshape2')
qplot(total_bill, tip, data = tips, geom = 'point')
#camada1
camada1<-geom_point(
mapping = aes(x=total_bill, y=tip, color=sex),
data = tips;
size=3
)
#camada1
camada1<-geom_point(
mapping = aes(x=total_bill, y=tip, color=sex),
data = tips,
size=3
)
camada1<-geom_point(
mapping = aes(x=total_bill, y=tip, color=sex),
data = tips,
size=3
)
ggplot() + 1
ggplot() + camada1
?aes
modelo_base<-lm(tip ~total_bill, data = tips)
modelo_fit <- data.frame(
total_bill = tips$total_bill,
predict(model, interval = 'confidence')
)
head(modelo_fit)
modelo_fit <- data.frame(
total_bill = tips$total_bill,
predict(modelo_base, interval = 'confidence')
)
head(modelo_fit)
#camada2
camada2<-geom_line(
mapping = aes(x = total_bill, y = fit),
data=modelo_fit,
color='darkred'
)
ggplot2()+camada1+camada2
ggplot()+camada1+camada2
#camada3
camada3<-geom_ribbon(
mapping = aes(x = total_bill, ymin = lwr, ymax = upr),
data = modelo_fit,
alpha = 0.3
)
ggplot()+camada1+camada2+camada3
##versão final otimizada
ggplot(tips, aes(x = total_bill, y = tip))+
geom_point(aes(color = sex))+
geom_smooth(method = 'lm')
myplot<-ggplot(tips, aes(x = total_bill, y = tip))+
geom_point(aes(color = sex))+
geom_smooth(method = 'lm')
print(myplot)
etnias <- read.csv('C:\\Users\\BI\\Documents\\Data Science - Curso\\RFundamentos_git\\etnias.csv')
head(etnias)
ggplot(etnias, aes(x = Sexo, y = Idade)) +
geom_point(shape = 1)+
geom_smooth(method = lm, color = "red", se = FALSE)
#Scatterplot com linha de regressão
# Dados
data = data.frame(cond = rep(c("Obs 1", "Obs 2"),
each = 10), var1 = 1:100 +
rnorm(100,sd = 9), var2 = 1:100 +
rnorm(100,sd = 16))
ggplot(data, aes(x = var1, y = var2)) +
geom_point(shape = 1) +
geom_smooth(method = lm , color = "red", se = FALSE)
#Geom_smooth = metodo statistico
? lm
#Lienar model
##Bar plot
# Dados
data = data.frame(grupo = c("A ","B ","C ","D ") ,
valor = c(33,62,56,67) ,
num_obs = c(100,500,459,342))
#Gerando a massa de dados
data$right = cumsum(data$num_obs) + 30 * c(0:(nrow(data)-1))
data$left = data$right - data$num_obs
ggplot(data, aes(ymin = 0))+
geom_rect(aes(xmin = left,xmax = right,
ymax = valor, colour=grupo, fill = grupo))+
xlab('Numero de obs') + ylab('Valor')
#Usando mtcars
ggplot(data = mtcars,  aes(x = disp, y = mpg)) + geom_point()
#outro aspecto que pode ser mapeado nesse grafico é a cor dos pontos
ggplot(data = mtcaras,
aes(x = disp, y = mpg,
colour = as.factor(am))) + geom_point()
ggplot(data = mtcars,
aes(x = disp, y = mpg,
colour = as.factor(am))) + geom_point()
#no entanto, tb pode usar uma variavel continua
ggplot(mtcars, aes(x = disp, y = mpg, colour = cyl)) + geom_point()
# TambÃ©m podemos mapear o tamanho dos pontos Ã  uma variÃ¡vel de interesse:
# A legenda é inserida no grÃ¡fico automaticamente
ggplot(mtcars, aes(x = disp, y = mpg, colour = cyl, size = wt)) + geom_point()
# TambÃ©m podemos mapear o tamanho dos pontos Ã  uma variÃ¡vel de interesse:
# A legenda é inserida no grÃ¡fico automaticamente
ggplot(mtcars, aes(x = disp, y = mpg, colour = cyl, size = wt)) + geom_point()
# Os geoms definem qual forma geomÃ©trica serÃ¡ utilizada para a visualizaÃ§Ã£o dos dados no grÃ¡fico.
ggplot(mtcars, aes(x = as.factor(cyl), y = mpg)) + geom_boxplot()
# Histogramas
ggplot(mtcars, aes(x = mpg), binwidth = 30) + geom_histogram()
# GrÃ¡fico de Barras
ggplot(mtcars, aes(x = as.factor(cyl))) + geom_bar()
ggplot(mtcars, aes(x = as.factor(cyl), y = mpg,
colour = as.factor(cyl))) + geom_boxplot()
ggplot(mtcars, aes(x = as.factor(cyl), y = mpg,
fill = as.factor(cyl))) + geom_boxplot()
ggplot(mtcars,
aes(x = as.factor(cyl), y = mpg)) +
geom_boxplot(color = "blue", fill = "seagreen4")
# Podemos alterar os eixos
ggplot(mtcars, aes(x = mpg)) +
geom_histogram() +
xlab("Milhas por galÃ£o") + ylab("FrequÃªncia")
# Podemos alterar os eixos
ggplot(mtcars, aes(x = mpg)) +
geom_histogram() +
xlab("Milhas por galão") + ylab("Frequencia")
# Alterar os limites do grÃ¡fico
ggplot(mtcars, aes(x = mpg)) + geom_histogram() + xlab("Milhas por galão") + ylab("Frequencia") +
xlim(c(0, 40)) +
ylim(c(0,8))
# Legendas
ggplot(mtcars, aes(x = as.factor(cyl), fill = as.factor(cyl))) +
geom_bar() +
labs(fill = "cyl")
# Trocando a posiÃ§Ã£o da legenda
ggplot(mtcars, aes(x = as.factor(cyl), fill = as.factor(cyl))) +
geom_bar() +
labs(fill = "cyl") +
theme(legend.position = "top")
# Facets
ggplot(mtcars, aes(x = mpg, y = disp, colour = as.factor(cyl))) +
geom_point() +
facet_grid(am~.)
ggplot(mtcars, aes(x = mpg, y = disp, colour = as.factor(cyl))) +
geom_point() +
facet_grid(.~am)
# Facets
ggplot(mtcars, aes(x = mpg, y = disp, colour = as.factor(cyl))) +
geom_point() +
facet_grid(am~.)
library(ggplot2)
# Plots diferentes juntos (diferente de Facet)
install.packages("gridExtra")
library(gridExtra)
library(ggplot2)
# Dataset diamonds
data(diamonds)
# Histograma como plot1
plot1 <- qplot(price, data = diamonds, binwidth = 1000)
# ScatterPlot como plot2
plot2 <- qplot(carat, price, data = diamonds, colour = cut)
# Combina os 2 plots na mesma Ã¡rea
grid.arrange(plot1, plot2, ncol = 1)
ggplot(data = diamonds, aes(x = price, group = cut, fill = cut)) +
geom_density(adjust = 1.5)
ggplot(data = diamonds, aes(x = price, group = cut, fill = cut)) +
geom_density(adjust = 1.5 , alpha = 0.2)
ggplot(data = diamonds,aes(x = price, group = cut, fill = cut)) +
geom_density(adjust = 1.5, position = "fill")
install.packages("reshape2")
install.packages("plotly")
library(reshape2)
library(plotly)
install.packages("reshape2")
library(reshape2)
library(plotly)
sp <- ggplot(tips, aes(x = total_bill, y = tip/total_bill)) + geom_point(shape = 1)
sp + facet_grid(sex ~ .)
ggplotly()
sp + facet_grid(. ~ sex)
ggplotly()
sp + facet_wrap( ~ day, ncol = 2)
ggplotly()
ggplot(mpg, aes(displ, hwy)) + geom_point() + facet_wrap(~manufacturer)
ggplotly()
install.packages('lattice')
getwd()
library(lattice)
xyplot(data = iris, groups = Species, Sepal.Length ~Petal.Length)
#Scatterplot
splom(trees)
xyplot(data = iris, groups = Species, Sepal.Length ~Petal.Length)
?Titanic
barchart(Class ~ Freq | Sex + Age, data = as.data.frame(Titanic),
groups = Survived, stack = T, layout=c(4,1),
auto.key = list(title = 'Dados Titanic'), columns = 2)
barchart(Class ~ Freq | Sex + Age, data = as.data.frame(Titanic),
groups = Survived, stack = T, layout=c(4,1),
auto.key = list(title = 'Dados Titanic'), columns = 2),
scales = list(x = 'free'))
barchart(Class ~ Freq | Sex + Age, data = as.data.frame(Titanic),
groups = Survived, stack = T, layout=c(4,1),
auto.key = list(title = 'Dados Titanic', columns = 2),
scales = list(x = 'free'))
x = equal.count(rivers)
x
Petallength <-equal.count(iris$Petal.Length, 4)
Petallength
xyplot(Sepal.Length~Sepal.Width | Petallength, data=iris)
Petallength <-equal.count(iris$Petal.Length, 2)
Petallength
xyplot(Sepal.Length~Sepal.Width | Petallength, data=iris)
Petallength <-equal.count(iris$Petal.Length, 4)
Petallength
xyplot(Sepal.Length~Sepal.Width | Petallength, data=iris)
install.packages('ggmap')
install.packages('mapproj')
map1<-get_map(location='Brazil', zoom = 4)
library(ggmap)
library(mapproj)
map1<-get_map(location='Brazil', zoom = 4)
?get_map
map1<-get_map(location= 'Brazil', zoom = 4)
map1<-get_map(location= 'Sao Paulo', zoom = 4)
map1<-get_map(location = 'Brazil', zoom = 4)
map1<-get_map(location = c(lon = 14.2350, lat = 51.9253), zoom = 4)
map2<-get_map(location = c(lon = 54.5260, lat = 15.2551), zoom = 4)
ggmap(map1)
ggmap(map2)
map1<-get_map(location = c(lon = 51.9253 , lat =14.2350 ), zoom = 4)
ggmap(map1)
ggmap(map2)
ggmap(map1)
map2<-get_map(location = c(lon = 15.5260, lat = 15.2551), zoom = 4)
ggmap(map2)
map2<-get_map(location = c(lon = 54.5260, lat = 15.2551), zoom = 4)
map1<-get_map(location = c(lon = - 51.9253 , lat =-14.2350 ), zoom = 4)
ggmap(map1)
ggmap(map2)
map2<-get_map(location = c(lon = 54.5260, lat = 25.2551), zoom = 4)
ggmap(map2)
qmap('Recife')
qmap('L69 3GP', zoom = 16)
qmap('L69 3GP', zoom = 16, maptype = 'satellite')
?maptype
mapImageData1<- get_map(location = c(lon = -0.016179, lat= 51.538525),
color = 'color',
source = 'google',
maptype = 'satellite',
zoom = 17)
ggmap(mapImageData1,
extent = 'device',
ylab = 'Latitude',
xlab = 'Longitude')
mapImageData1<- get_map(location = c(lon = -0.016179, lat= 51.538525),
color = 'color',
source = 'google',
maptype = 'hybrid',
zoom = 17)
mapImageData1<- get_map(location = c(lon = -0.016179, lat= 51.538525),
color = 'color',
source = 'google',
maptype = 'hybrid',
zoom = 17)
ggmap(mapImageData1,
extent = 'device',
ylab = 'Latitude',
xlab = 'Longitude')
#Maps
install.packages('mapdata')
install.packages('maps')
install.packages("maps")
library(maps)
library(mapdata)
map('worldHires', 'Canada',
xlim = c(-141,-53),
ylim = c(40, 85),
col = 'gray90',
fill = TRUE)
?MAP
?map
help(package = 'maps')
install.packages('networkD3')
library(networkD3)
data(MisLinks, MisNodes)
forceNetwork(Links = MisLinks, Nodes = MisNodes, SOurce = 'source',
Target = 'target', Value = 'value', NodeID = 'name',
Group = 'group', opacity = 0.4)
forceNetwork(Links = MisLinks, Nodes = MisNodes, Source = 'source',
Target = 'target', Value = 'value', NodeID = 'name',
Group = 'group', opacity = 0.4)
?networkD3
#Criando dados
src<- c('A','A','A','A',
'B','B','C','C','D')
target<-c('B','C','D','J',
'E','F','G','H','I')
networkData <-data.frame(src, target)
#Plot
simpleNetwork(networkData)
#Heatmap
install.packages('heatmaply')
library(heatmaply)
heatmaply(mtcars, k_col = 2, k_row = 3) %>% layout(margin = list(l = 130, b=40))
install.packages('dygraphs')
library(dygraphs)
dygraph(nhtemp, main = 'Temperaturas')%>%
dyRangeSelector(dateWindow = c('1920-01-01','1960-01-01'))
install.packages('rmaps')
install.packages('googleVis')
library(googleVis)
# Criando um Datafrane
df = data.frame(Pais = c("BR", "CH", "AR"),
ExportaÃ§Ãµes = c(10,13,14),
ImportaÃ§Ãµes = c(23,12,32))
# Criando um Datafrane
df = data.frame(Pais = c("BR", "CH", "AR"),
Exportacoes = c(10,13,14),
Importacoes = c(23,12,32))
#Grafico de linha
Line<-gvisLineChart(df)
plot(Line)
Column <- gvisColumnChart(df)
plot(Column)
#Grafico barras horizontal
Bar<-gvisBarChart(df)
plot(Bar)
#Grafico barras horizontal
Pie<-gvisPieChart(df)
plot(Pie)
#Grafico barras horizontal
Pie<-gvisPieChart(CityPopularity)
plot(Pie)
# GrÃ¡ficos Combinados
Combo <- gvisComboChart(df, xvar = "Pais",
yvar = c("Exportacoes", "Importacoes"),
options = list(seriesType = "bars",
series='{1: {type:"line"}}'))
plot(Combo)
#Scatter chart
Scatter <- gvisScatterChart(women,
options=list(
legend="none",
lineWidth=2, pointSize=0,
title="Women", vAxis="{title:'weight (lbs)'}",
hAxis="{title:'height (in)'}",
width=300, height=300))
plot(Scatter)
#Buble
Bubble <- gvisBubbleChart(Fruits, idvar="Fruit",
xvar="Sales", yvar="Expenses",
colorvar="Year", sizevar="Profit",
options=list(
hAxis='{minValue:75, maxValue:125}'))
plot(Buble)
plot(Bubble)
# Customizando
M <- matrix(nrow=6,ncol=6)
M[col(M)==row(M)] <- 1:6
dat <- data.frame(X=1:6, M)
SC <- gvisScatterChart(dat,
options=list(
title="Customizing points",
legend="right",
pointSize=30,
series="{
0: { pointShape: 'circle' },
1: { pointShape: 'triangle' },
2: { pointShape: 'square' },
3: { pointShape: 'diamond' },
4: { pointShape: 'star' },
5: { pointShape: 'polygon' }
}"))
plot(SC)
# Gauge
Gauge <- gvisGauge(CityPopularity,
options=list(min=0, max=800, greenFrom=500,
greenTo=800, yellowFrom=300, yellowTo=500,
redFrom=0, redTo=300, width=400, height=300))
plot(Gauge)
# Mapas
Intensity <- gvisIntensityMap(df)
plot(Intensity)
# Geo Chart
Geo=gvisGeoChart(Exports, locationvar="Country",
colorvar="Profit",
options=list(projection="kavrayskiy-vii"))
plot(Geo)
# Google Maps
AndrewMap <- gvisMap(Andrew, "LatLong" , "Tip",
options=list(showTip=TRUE,
showLine=TRUE,
enableScrollWheel=TRUE,
mapType='terrain',
useMapTypeControl=TRUE))
plot(AndrewMap)
GeoStates <- gvisGeoChart(states, "state.name", "Illiteracy",
options=list(region="US",
displayMode="regions",
resolution="provinces",
width=600, height=400))
GeoStates <- gvisGeoChart(state, "state.name", "Illiteracy",
options=list(region="US",
displayMode="regions",
resolution="provinces",
width=600, height=400))
states <- data.frame(state.name, state.x77)
GeoStates <- gvisGeoChart(states, "state.name", "Illiteracy",
options=list(region="US",
displayMode="regions",
resolution="provinces",
width=600, height=400))
plot(GeoStates)
# Mais exemplos
demo(googleVis)
