vetor1 <- c(1:10)
vetor1
lenght(vetor1)
length(vetor1)
mode(vetor1)
class(vetor1)
typeof(vetor1)
help(c)
matriz1 <- matrix(1:10, nrow =2)
View(matriz1)
matriz1
matriz1 <- matrix(1:10, nrow =3)
matriz1 <- matrix(1:10, nrow =4)
matriz1 <- matrix(1:20, nrow =4)
matriz1
length(matriz1)
mode(matriz1)
class(matriz1)
typeof(matriz1)
matriz1 <- matrix(nrow = 4, 1:20)
matriz1
array1 <- array(1:5, dim=c(3,3,3))
array1
mode(array1)
view(iris)
View(iris)
length(iris)
lista1 <- list(a=matriz1, b= vetor1)
lista1
func1 <- function(x){
var1<- x*x
return(var1)
}
func1(5)
class(func1)
objects()
rm(array1, func1)
objects()
vetor_char = c("Olá", "DSA")
vetor_char
vetor_num = c(1.8,1.5,66.5)
vetor_num
vetor_complexo = c(5.2+3i, 3.9-5i)
vetor_complexo
vetor_logic = c(TRUE,FALSE,TRUE,FALSE,FALSE)
vetor_logic
veto_int = c(2,4,5)
veto_int
vetor1 = seq(1:10)
vetor1
is.vector(vetor1)
vetor2=rep(1:5)
vetor2
lista_caracter = list('A', 'Bem-vindo', 'Dsa')
lista_caracter
#lista de numeros inteiros
lista_inteiros = list(2,3,4)
lista_inteiros
lista_numerico
#lista de floats
lista_numerico = list(1.9,45.3,3.6)
lista_numerico
#lista complexo
lista_complexos = list(5.2+3i, 2.4+8i)
lista_complexos
lista_logicos
#lista logicos
lista_logicos = list(TRUE,FALSE,FALSE,TRUE)
lista_logicos
lista_composta1 =  list('a', 3, TRUE)
lista_composta1
lista1 <- list(1:10, c('Marias', "João", 'Alfredo'), rnorm(10))
lista1
?rnorm
#Slice lista
lista1[1]
lista1[c(1,2)]
lista1[2]
lista1[[2][1]]
lista1[[2]][1]
lista1[[2]][1] = 'Monica'
lista1[[2]][1]
lista1[2]
lista1
names(lista1) <- c('inteiros', 'caracteres', 'numericos')
lista1
vec_num <- 1:4
vec_char <- c('A','B','C','D')
lista2 ,- list(Numeros = vec_num, Letras = vec_char)
lista2 <- list(Numeros = vec_num, Letras = vec_char)
lista2
#Nomear diretamente
lista2<-list(elementos1=3:5, elemento2=c(7.2,3.5))
lista2
lista1
lista1$caracteres
length(lista1$inteiros)
lista1$inteiros
lenght(lista1)
length(lista1)
mode(lista1$numericos)
mode(lista1$caracteres)
lista3 <- c(lista1,lista2)
lista3
v =c(1:3)
v
l = as.list(v)
l
mat = matrix(1:4, nr=2)
mat
vec
lst = list(mat,vec)
lst
lst = list(mat,vec)
vec = c(1:9)
vec
lst = list(mat,vec)
lst
#usando o stringr
library(stringr)
library("stringi", lib.loc="C:/R-3.5.0/library")
install.packages("C:/R-3.5.0/library/stringi_1.1.7.zip", repos = NULL, type = "win.binary")
library(stringi)
#usando o stringr
library(stringr)
#Dividir uma string em caractreres
strsplit('Hisotirograma e elementos de dados', NULL)
?strsplit
strsplit('Hisotirograma e elementos de dados', "")
strsplit('Hisotirograma e elementos de dados', '')
strsplit('Hisotirograma e elementos de dados', '')
strsplit("Hisotirograma e elementos de dados", "")
strsplit("Histograma e elementos de dados", "")
strsplit("Histograma e elementos de dados", " ")
string1 <- c('Esta é a primeira parte da string e será',
'Aqui a minha string continua')
string1
string1
string2 <- c('Precisamos testar outras strings - @??!$',
'Analise de dados em R')
string2
str_c(c(string1, string2), sep ='')
str_c(c(string1, string2), sep ='
')
str_c(c(string1, string2), sep =' ')
str_count(string2, 's')
# Localiza a primeira e ultima posição que o caracter aparece, str_locate_all
str_locate_all(string2, 's')
str_replace(string2, '\\s', '')
str_replace_all(string2, '\\s','')
#Detectando padrões nas strings, primeira função para data mining(text)
string1 <- '23 mai 2000'
string2 <- '1 mai 2000'
padrao <- 'mai 20'
grepl(pattern = padrao, x = string1) #grepl busca a func padrão
padrao <- 'mai20'
grepl(pattern = padrao, x = string1) #grepl busca a func padrão
grepl(pattern = 'mai', x = string1) #grepl busca a func padrão
arquivo <- read.csv('http://www.gutenberg.org/files/100/100-0.txt')
head(arquivo)
arquivo <- read.csv('http://www.gutenberg.org/cache/epub/100/pg100.txt')
head(arquivo)
arquivo <- read.csv('http://www.gutenberg.org/cache/epub/100/pg100.txt')
arquivo <- read.csv('http://www.gutenberg.org/cache/epub/100/pg100.txt')
arquivo<- read.csv('http://www.gutenberg.org/cache/epub/100/pg100.txt')
arquivo<- read.csv('http://www.gutenberg.org/cache/epub/100/pg100.txt', row.names = NULL)
arquivo<- read.csv('http://www.gutenberg.org/cache/epub/100/pg100.txt', row.names = NULL, fileEncoding="UTF-16LE")
arquivo<- read.csv('http://www.gutenberg.org/cache/epub/100/pg100.txt', row.names = NULL, fileEncoding="UTF-8")
arquivo<- read.csv('http://www.gutenberg.org/cache/epub/100/pg100.txt', row.names = NULL, header= TRUE)
head(arquivo)
arquivo<- read.csv('http://www.gutenberg.org/cache/epub/100/pg100.txt', row.names = NULL, header= TRUE,  fileEncoding = 'UTF-8')
arquivo<- read.csv('http://www.gutenberg.org/cache/epub/100/pg100.txt', row.names = NULL,  fileEncoding = 'UTF-8', header= TRUE)
head(arquivo)
arquivo<- read.csv('http://www.gutenberg.org/cache/epub/100/pg100.txt', row.names = NULL,  fileEncoding = 'UTF-16', header= TRUE)
arquivo<- read.txt('http://www.gutenberg.org/cache/epub/100/pg100.txt', row.names = NULL,  fileEncoding = 'UTF-16', header= TRUE)
arquivo<- read.csv('http://www.gutenberg.org/cache/epub/100/pg100.txt', header= TRUE, row.names = NULL,  fileEncoding = 'UTF-16', )
arquivo<- read.csv('http://www.gutenberg.org/cache/epub/100/pg100.txt', header= TRUE, row.names = NULL,  fileEncoding = 'UTF-16')
arquivo<- read.csv('http://www.gutenberg.org/cache/epub/100/pg100.txt', header= TRUE, row.names = NULL,  fileEncoding = 'UTF-8')
arquivo<- read.csv('http://www.gutenberg.org/cache/epub/100/pg100.txt', header= TRUE, row.names = NULL)
head(arquivo)
arquivo<- read.csv('http://www.gutenberg.org/cache/epub/100/pg100.txt', header= TRUE, sep ' ', row.names = NULL)
arquivo<- read.csv('http://www.gutenberg.org/cache/epub/100/pg100.txt', header= TRUE, sep = ' ', row.names = NULL)
head(arquivo)
arquivo<- read.csv('http://www.gutenberg.org/cache/epub/100/pg100.txt', header= TRUE, sep = ' ', row.names = NULL, fileEncoding = 'UTF-8')
arquivo<- read.csv('http://www.gutenberg.org/cache/epub/100/pg100.txt', header= TRUE, sep = ' ', fileEncoding = 'UTF-8')
strtail<- function(s,n=1){
if(n<0)
substring(s, 1-n)
else
substring(s, nchar(s)-n+1)
}
strtail('String de teste', 6)
arquivo<- read.table('http://www.gutenberg.org/cache/epub/100/pg100.txt', header= TRUE, sep = ' ', fileEncoding = 'UTF-8')
arquivo<- read.table('http://www.gutenberg.org/cache/epub/100/pg100.txt', header= TRUE, sep = ' ')
arquivo<- read.table('http://www.gutenberg.org/cache/epub/100/pg100.txt', row.names = NULL, header= TRUE)
arquivo<- read.csv2('http://www.gutenberg.org/cache/epub/100/pg100.txt', row.names = NULL, header= TRUE)
arquivo<- read.csv2('http://www.gutenberg.org/cache/epub/100/pg100.txt')
arquivo<- read.csv('http://www.gutenberg.org/cache/epub/100/pg100.txt')
arquivo<- read.table('http://www.gutenberg.org/cache/epub/100/pg100.txt')
arquivo<- read.table('http://www.gutenberg.org/cache/epub/100/pg100.txt', row.names(0))
arquivo<- read.table('http://www.gutenberg.org/cache/epub/100/pg100.txt', row.names(NULL))
arquivo<- read.table('http://www.gutenberg.org/cache/epub/100/pg100.txt', row.names(NULL), READER= TRUE)
arquivo<- read.table('http://www.gutenberg.org/cache/epub/100/pg100.txt',READER= TRUE, row.names(NULL))
arquivo<- read.table('http://www.gutenberg.org/cache/epub/100/pg100.txt' ,row.names(NULL))
arquivo<- read.table('http://www.gutenberg.org/cache/epub/100/pg100.txt' ,row.names(NULL), blank.lines.skip = true)
arquivo<- read.table('http://www.gutenberg.org/cache/epub/100/pg100.txt' ,row.names(NULL), blank.lines.skip = TRUE)
arquivo<- read.table('http://www.gutenberg.org/cache/epub/100/pg100.txt' ,row.names= NULL, blank.lines.skip = TRUE)
arquivo<- read.table('http://www.gutenberg.org/cache/epub/100/pg100.txt' ,row.names= NULL, blank.lines.skip = TRUE, fileEncoding = 'UTF-8')
arquivo<- read.table('http://www.gutenberg.org/cache/epub/100/pg100.txt' , blank.lines.skip = TRUE, fileEncoding = 'UTF-8')
arquivo<- read.table('http://www.gutenberg.org/cache/epub/100/pg100.txt' , fileEncoding = 'UTF-8')
arquivo<- read.csv('http://www.gutenberg.org/cache/epub/100/pg100.txt' , fileEncoding = 'UTF-8')
df <- data.frame()
class(df)
df
idades <-numeric()
datas <- as.Date(character())
codigos <-integer()
nomes <- character()
idades <-numeric()
datas <- as.Date(character())
codigos <-integer()
df <- data.frame(c(nomes, idades, datas, codigos))
df
#Criando vetores
pais = c('US', 'Den', 'Hol', "Esp", "BRA")
nome = c('Mauricio', 'Pedro', 'Aline', 'Beatriz', 'Marta')
altura = c(1.78,1.72,1.63,1.59,1.63)
codigo = c(5001,2183,4702,7965,8890)
pesquisa = data.frame(pais, nome, altura, codigo)
pesquisa
view(pesquisa)
View(pesquisa)
olhos = c('verde', 'azul','castanho', 'castanho')
pesq = cbind(pesquisa, olhos)
olhos = c('verde', 'azul', 'azul', 'castanho', 'castanho')
pesq = cbind(pesquisa, olhos)
pesq
?nbind
?cbind
#informações sobre o df
str(pesq) #resumo do df
dim(pesq)
length(pesq)
pesq$pais
pesq$nome
#Slice, valor
pesq[1,1]
pesq[3,2]
#Numero de linhas e colunas
nrow(pesq)
ncol(pesq)
tail(pesq)
tail(mtcars)
#Primeiras elementos do df
head(pesq)
?mtcars
mtcars
pesq[altura < 1.60,]
pesq[altura <1.60, c('codigo', 'olhos')]
pesq
pesq[altura > 1.70,]
names(pesq) <- c('Pais', 'Nome', 'Altura', 'codigo','olhos')
pesq
colnames(pesq) <- c('Var 1', 'Var 2', 'Var 3', 'Var 4', 'Var 5')
rownames(pesq) <- c('Obs 1', 'Obs 2', 'Obs 3', 'Obs 4', 'Obs 5')
pesq
df2 <- data.frame(read.csv(file = 'C:\Users\BI\Documents\Data Science - Curso\RFundamentos_git\Scripts_prontos\5-Cap02\dframe.csv', header = TRUE, sep = ','))
df2 <- data.frame(read.csv(file = 'C:\Users\BI\Documents\Data Science - Curso\RFundamentos_git\Scripts_prontos\5-Cap02\dframe.csv', header = TRUE, sep = ","))
df2 <- data.frame(read.csv(file = 'dframe.csv', header = TRUE, sep = ","))
head(df2)
View(df2)
summary(df2)
df2$Diabete
df2$Status
df2$status
plot(df2$Admdate)
summary(mtcars)
summary(mtcars$mpg)
plot(mtcars$mpg)
plot(mtcars$gear)
plot(mtcars$mpg)
ggplot2(mtcars$mpg)
plot(mtcars$mpg)
plot(mtcars$disp)
plot(mtcars$mpg,mtcars$disp)
df3 <- merge((pesq,df2))
df3 <- merge(pesq,df2)
plot(df3)
# If -else
x =25
if (x <30)
{'Este numer é menor que 30'}
if (x <30)
{'Este numer é menor que 30'}
{
'Este numero é maior que 7'
}
# If -else
x =6
{
'Este numero é maior que 7'
}
#Comandos podem ser ainhados
x = 7
if (x<7){
'Num menor que 7'
} else if(x==7){
'Num n menor que 7'
}
if (x<7){
'Num menor que 7'
} else if(x==7){
'Num é o numero 7'
}else{
"numero n menor que 7"
}
ifelse(x<6, 'Correto', NA)
#Ifelse
x= 5
ifelse(x<6, 'Correto', NA)
x=9
ifelse(x<6, 'Correto', NA)
x = c(7,5,4)
ifelse(x<5, 'Menor que 5',
ifelse(x==5, 'Igual a 5', ' Maior que 5'))
#Empressoes ifelse ainhadas(uma dentro da outra)
x = c(7,5,4)
ifelse(x<5, 'Menor que 5',
ifelse(x==5, 'Igual a 5', ' Maior que 5'))
#Estruturas if dentro de funções
func1 <- function(x,y){
ifelse(y < 7, x+y, 'Não encontrado')
}
func1(4,2)
func1(40,7)
#rep
rep(rnorm(10),5)
repeat{
x = x + 3
if (x> 99)
break
print(x)
}
x = 1
repeat{
x = x + 3
if (x> 99)
break
print(x)
}
for(i in 1:20){print(i)}
for (q in rnorm(10)) {print(q)}
print(i)}
print(i)}
#Ignora alguns elementos dentro do loop
for(i in 1:22){
if ( i==13 | i ==15)
next
print(i)
}
#break
for(i in 1:22){
if ( i==13 )
break
print(i)
}
#Loop while
x=1
while(x<5){
x = x+ 1
print(x)
}
while(y<5){
y = y +10
print(y)
}
mtcars[4,7]
# Exercício 1 - Crie um vetor com 12 números inteiros
vetor<-c(1:12)
vetor
# Exercício 2 - Crie uma matriz com 4 linhas e 4 colunas preenchida com números inteiros
matrix(4,4)
# Exercício 2 - Crie uma matriz com 4 linhas e 4 colunas preenchida com números inteiros
matrix(1:16)
?matrix
# Exercício 2 - Crie uma matriz com 4 linhas e 4 colunas preenchida com números inteiros
matrix(1:16, nr=4, nc= 4)
list(vetor,matrix)
?cbind
list(cbin(vetor,matrix))
# Exercício 2 - Crie uma matriz com 4 linhas e 4 colunas preenchida com números inteiros
matriz<-matrix(1:16, nr=4, nc= 4)
matriz
list(cbin(vetor,matriz))
list(cbind(vetor,matriz))
?list
x =as.lst(cbind(vetor,matriz))
x =as.list(cbind(vetor,matriz))
x =cbind(vetor,matriz)
x =cbind(matriz,vetor)
x =cbind2(matriz,vetor)
# Exercício 1 - Crie um vetor com 12 números inteiros
vetor<-seq(1:12)
vetor
x =cbind2(matriz,vetor)
# Exercício 1 - Crie um vetor com 12 números inteiros
vetor<-seq(1:12, nr=2)
# Exercício 1 - Crie um vetor com 12 números inteiros
vetor<-seq(1:12)
# Exercício 1 - Crie um vetor com 12 números inteiros
vetor<-seq(1:12, by row)
# Exercício 1 - Crie um vetor com 12 números inteiros
vetor<-seq(1:12)
x =cbind2(matriz,vetor)
lista =c(matriz,vetor)
lista
arquivo<- read.table('http://data.princeton.edu/wws509/datasets/effort.dat')
arquivo
df <-data.frame(arquivo)
View(df)
# Exercício 5 - Transforme o dataframe anterior, em um dataframe nomeado com os seguintes labels:
# c("config", "esfc", "chang")
names(df) <-c("config", "esfc", "chang")
df
# Exercício 5 - Transforme o dataframe anterior, em um dataframe nomeado com os seguintes labels:
# c("config", "esfc", "chang")
names(df) <-c("Config", "Esfc", "Chang")
df
iris
dim(iris)
str(df)
# Exercício 7 - Crie um plot simples usando as duas primeiras colunas do dataframe iris
primeiras <- head(iris)
primeiras
?head
# Exercício 7 - Crie um plot simples usando as duas primeiras colunas do dataframe iris
primeiras <- head(iris, n=2L)
primeiras
plot(primeiras)
?plot
plot(index,primeiras)
plot(primeiras,index)
plot(primeiras)
?plot
plot(primeiras)
# Exercício 7 - Crie um plot simples usando as duas primeiras colunas do dataframe iris
primeiras <- head(iris, n=2)
primeiras
plot(columns, primeiras)
plot(mtcars$mpg,mtcars$disp)
m o conjunto de dados do
## dataframe iris em que Sepal.Length > 7
# Dica: consulte o help para aprender como usar a função subset()
# Exercício 8 - Usando s função subset, crie um novo dataframe com o conjunto de dados do
## dataframe iris em que Sepal.Length > 7
# Dica: consulte o help para aprender como usar a função subset()
# Exercício 8 - Usando s função subset, crie um novo dataframe com o conjunto de dados do
## dataframe iris em que Sepal.Length > 7
# Dica: consulte o help para aprender como usar a função subset()
# Exercício 8 - Usando s função subset, crie um novo dataframe com o conjunto de dados do
## dataframe iris em que Sepal.Length > 7
# Dica: consulte o help para aprender como usar a função subset()
# Exercício 8 - Usando s função subset, crie um novo dataframe com o conjunto de dados do
## dataframe iris em que Sepal.Length > 7
# Dica: consulte o help para aprender como usar a função subset()
# Exercício 8 - Usando s função subset, crie um novo dataframe com o conjunto de dados do
## dataframe iris em que Sepal.Length > 7
# Dica: consulte o help para aprender como usar a função subset()
# Exercício 8 - Usando s função subset, crie um novo dataframe com o conjunto de dados do
## dataframe iris em que Sepal.Length > 7
# Dica: consulte o help para aprender como usar a função subset()
# Exercício 8 - Usando s função subset, crie um novo dataframe com o conjunto de dados do
## dataframe iris em que Sepal.Length > 7
# Dica: consulte o help para aprender como usar a função subset()
# Exercício 8 - Usando s função subset, crie um novo dataframe com o conjunto de dados do
## dataframe iris em que Sepal.Length > 7
# Dica: consulte o help para aprender como usar a função subset()
# Exercício 8 - Usando s função subset, crie um novo dataframe com o conjunto de dados do
## dataframe iris em que Sepal.Length > 7
# Dica: consulte o help para aprender como usar a função subset()
?subset
sepal_length=subset(iris, Sepal.Length > 7)
sepal_length
